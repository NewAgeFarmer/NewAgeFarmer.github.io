(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{307:function(v,e,_){"use strict";_.r(e);var a=_(6),s=Object(a.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js"}},[v._v("#")]),v._v(" Node.js")]),v._v(" "),e("h3",{attrs:{id:"后端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后端"}},[v._v("#")]),v._v(" 后端")]),v._v(" "),e("p",[v._v("JavaScript是一门前端的脚本语言，需要通过浏览器的"),e("strong",[v._v("解析引擎")]),v._v("才能运行，在Chrome上就是大名鼎鼎的"),e("strong",[v._v("V8引擎")]),v._v("。")]),v._v(" "),e("p",[v._v("“有没有办法使JavaScript脱离浏览器运行在服务端呢？”，JS的发明公司网景通讯提出了这么一个构想。")]),v._v(" "),e("p",[v._v("**任何能够用 JavaScript 实现的应用系统，最终都必将用 JavaScript 实现。**服务端也毫不例外。")]),v._v(" "),e("p",[v._v("于2009年，谷歌发布了一款基于Chrome V8引擎的JavaScript运行环境，名为"),e("strong",[v._v("Node.js")]),v._v("。由Ryan Dahl开发，Node.js使用了一个事件驱动、非阻塞式I/O模型，让 JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。")]),v._v(" "),e("p",[v._v("Javascript 是一个"),e("strong",[v._v("事件驱动")]),v._v("语言，Node利用了这个优点，编写出可扩展性高的服务器。Node采用了一个称为“事件循环(event loop）”的架构，使得编写可扩展性高的服务器变得既容易又安全。提高服务器性能的技巧有多种多样。Node选择了一种既能提高性能，又能减低开发复杂度的架构。这是一个非常重要的特性。并发编程通常很复杂且布满地雷。Node绕过了这些，但仍提供很好的性能。")]),v._v(" "),e("p",[v._v("Node采用一系列“非阻塞”库来支持事件循环的方式。本质上就是为文件系统、数据库之类的资源提供接口。向文件系统发送一个请求时，无需等待硬盘（寻址并检索文件），硬盘准备好的时候非阻塞接口会通知Node。该模型以可扩展的方式简化了对慢资源的访问， 直观，易懂。尤其是对于熟悉onmouseover、onclick等DOM事件的用户，更有一种似曾相识的感觉。")]),v._v(" "),e("p",[v._v("Node可以在不新增额外线程的情况下，依然可以对任务进行并发处理 —— Node.js是单线程的。它通过事件循环（event loop）来实现并发操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。")]),v._v(" "),e("h3",{attrs:{id:"特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),e("ul",[e("li",[v._v("它是一个Javascript运行环境")]),v._v(" "),e("li",[v._v("依赖于Chrome V8引擎进行代码解释")]),v._v(" "),e("li",[v._v("事件驱动")]),v._v(" "),e("li",[v._v("非阻塞I/O")]),v._v(" "),e("li",[v._v("轻量、可伸缩，适于实时数据交互应用")]),v._v(" "),e("li",[v._v("单进程，单线程")])]),v._v(" "),e("h3",{attrs:{id:"解决痛点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决痛点"}},[v._v("#")]),v._v(" 解决痛点")]),v._v(" "),e("ol",[e("li",[v._v("并发连接\n异步、事件驱动模型\n异步机制、事件驱动整个过程没有阻塞新用户的连接，也不需要维护已有用户的连接。\n基于这样的机制，理论上陆续有用户请求连接，NodeJS都可以进行响应，因此NodeJS能支持比Java、PHP程序更高的并发量.虽然维护事件队列也需要成本，再由于NodeJS是单线程，事件队列越长，得到响应的时间就越长，并发量上去还是会力不从心。\nNodeJS解决并发连接问题：更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存）。")]),v._v(" "),e("li",[v._v("I/O阻塞\nJava、PHP也有办法实现并行请求（子线程），但NodeJS通过回调函数（Callback）和异步机制会做得很自然。")])]),v._v(" "),e("h3",{attrs:{id:"node-js的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js的优缺点"}},[v._v("#")]),v._v(" Node.jS的优缺点")]),v._v(" "),e("h5",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[v._v("#")]),v._v(" 优点：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("前端/后端开发使用同一种语言")])])]),v._v(" "),e("p",[v._v("像 ASP.NET 或 Spring 这样的技术需要开发人员学习一门新的服务端语言，比如C#，VB.NET 或者 Java。而 Node.js在服务端和客户端都是使用 JavaScript，这意味着开发人员在各层上只需使用一门语言。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("性能和I/O负载：")])])]),v._v(" "),e("p",[v._v("Nodejs非常好的解决了IO密集的问题，通过异步IO来实现。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("连接的内存开销：")])])]),v._v(" "),e("p",[v._v("每个Node.js进程可以支持超过12万活跃的连接，每个连接消耗大约2K的内存。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("学习成本较低")])])]),v._v(" "),e("p",[v._v("Node使用js开发，只需要学习简单的api，前端开发者就可以无障碍使用，学习成本很低。")]),v._v(" "),e("p",[v._v("而且，Node具有活跃的社区和丰富的模块池，拥有很多现成的功能实现。在框架方面，也有成熟的koa，express等基本框架和egg等二次封装框架，可根据需求选择，上手也比较方便。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("Nodejs的社区在壮大，不仅包的数量在快速增加，而且包的质量也要明显好于其他语言的。")])])]),v._v(" "),e("p",[v._v("很多明星级的包，都是简单而灵巧的，为了开发者的使用习惯而设计。我最常用到的工具包，如socket.io, moment.js, underscore.js, async.js, express.js, bower.js, grunt.js, forever.js…，确实在改变我以前的编程习惯。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("代码托管服务支持广泛")])])]),v._v(" "),e("p",[v._v("一些 Web 服务器和云服务提供商都支持 Node.js 的 Web 应用。我们在这里说几个，包括 Google,Microsoft IIS,Heroku,Microsoft Azure,Amazon（AWS）等等。")]),v._v(" "),e("h5",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[v._v("#")]),v._v(" 缺点：")]),v._v(" "),e("ul",[e("li",[v._v("不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；\n解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；")]),v._v(" "),e("li",[v._v("只支持单核CPU，不能充分利用CPU")]),v._v(" "),e("li",[v._v("可靠性低，一旦代码某个环节崩溃，整个系统都崩溃\n原因：单进程，单线程")])]),v._v(" "),e("p",[v._v("解决方案：\n（1）Nginx反向代理，负载均衡，开多个进程，绑定多个端口；")]),v._v(" "),e("p",[v._v("（2）开多个进程监听同一个端口，使用cluster模块；")]),v._v(" "),e("h3",{attrs:{id:"适合node-js的场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适合node-js的场景"}},[v._v("#")]),v._v(" 适合Node.jS的场景")]),v._v(" "),e("ul",[e("li",[v._v("RESTful API\n这是NodeJS最理想的应用场景，可以处理数万条连接，本身没有太多的逻辑，只需要请求API，组织数据进行返回即可。它本质上只是从某个数据库中查找一些值并将它们组成一个响应。由于响应是少量文本，入站请求也是少量的文本，因此流量不高，一台机器甚至也可以处理最繁忙的公司的API需求。")]),v._v(" "),e("li",[v._v("统一Web应用的UI层\n目前MVC的架构，在某种意义上来说，Web开发有两个UI层，一个是在浏览器里面我们最终看到的，另一个在server端，负责生成和拼接页面。")])]),v._v(" "),e("blockquote",[e("p",[v._v("不讨论这种架构是好是坏，但是有另外一种实践，面向服务的架构，更好的做前后端的依赖分离。如果所有的关键业务逻辑都封装成REST调用，就意味着在上层只需要考虑如何用这些REST接口构建具体的应用。那些后端程序员们根本不操心具体数据是如何从一个页面传递到另一个页面的，他们也不用管用户数据更新是通过Ajax异步获取的还是通过刷新页面。")])]),v._v(" "),e("ul",[e("li",[v._v("大量Ajax请求的应用\n例如个性化应用，每个用户看到的页面都不一样，缓存失效，需要在页面加载的时候发起Ajax请求，NodeJS能响应大量的并发请求。\n总而言之，NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);